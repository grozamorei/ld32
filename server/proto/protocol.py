#
# ATTENTION: This file is automatically generated. do not try to edit it.
#

import struct
import logging


# noinspection PyClassHasNoInit
class EnterWorldStatus():
    NONE, ENTER_SUCCESS = range(2)


class BaseMessage():
    @property
    def id(self):
        raise NotImplementedError()

    def __init__(self):
        self._length = -1
        self._real_id = 255

        self._format = "<i b"
        self._struct = None


class DebugPackage(BaseMessage):
    ID = 0

    @property
    def id(self):
        return 0

    def __init__(self):
        BaseMessage.__init__(self)
        self.sender = ""
        self.message = ""

        self._format += " b 50s b 120s"
        self._struct = struct.Struct(self._format)

    def encode_self(self):
        # noinspection PyListCreation
        values = [0, self.id]
        p_len = 0
        fmt = "<i b"

        new_str = self.sender.encode("utf-8") if isinstance(self.sender, unicode) else self.sender
        if len(new_str) <= 127:
            p_len += len(new_str) + 1
            values.append(len(new_str))
            fmt += " b"
        else:
            p_len += len(new_str) + 2
            values.append(len(new_str))
            fmt += " h"
        values.append(new_str)
        fmt += " " + str(len(new_str)) + "s"

        new_str = self.message.encode("utf-8") if isinstance(self.message, unicode) else self.message
        if len(new_str) <= 127:
            p_len += len(new_str) + 1
            values.append(len(new_str))
            fmt += " b"
        else:
            p_len += len(new_str) + 2
            values.append(len(new_str))
            fmt += " h"
        values.append(new_str)
        fmt += " " + str(len(new_str)) + "s"

        values[0] = p_len
        return struct.pack(fmt, *values)

    def unpack_from(self, raw):
        values = self._struct.unpack(raw)
        self._length = values[0]
        self._real_id = values[1]

        self.sender = values[3].strip()
        self.message = values[5].strip()


class RequestEnterWorld(BaseMessage):
    ID = 1

    @property
    def id(self):
        return 1

    def __init__(self):
        BaseMessage.__init__(self)
        self.user_name = ""
        self.world_name = ""

        self._format += " b 50s b 50s"
        self._struct = struct.Struct(self._format)

    def unpack_from(self, raw):
        values = self._struct.unpack(raw)
        self._length = values[0]
        self._real_id = values[1]

        self.user_name = values[3].strip()
        self.world_name = values[5].strip()


class DebugDeployConfiguration(BaseMessage):
    ID = 2

    @property
    def id(self):
        return 2

    def __init__(self):
        BaseMessage.__init__(self)
        self.configuration = None

        self._format += ""
        self._struct = struct.Struct(self._format)

    def unpack_from(self, raw):
        len_arr = raw[5:9]
        l = struct.unpack("i", len_arr)[0]
        fmt = "<i b i " + str(l) + "i"
        values = struct.unpack(fmt, raw)
        self._length = values[0]
        self._real_id = values[1]
        self.configuration = list(values[3:])

class Welcome(BaseMessage):
    ID = 3

    @property
    def id(self):
        return 3

    def __init__(self):
        BaseMessage.__init__(self)
        self.available_name = ""
        self.random_world = ""

        self._format += " b 50s b 50s"
        self._struct = struct.Struct(self._format)

    def encode_self(self):
        # noinspection PyListCreation
        values = [0, self.id]
        p_len = 0
        fmt = "<i b"

        new_str = self.available_name.encode("utf-8") if isinstance(self.available_name, unicode) else self.available_name
        if len(new_str) <= 127:
            p_len += len(new_str) + 1
            values.append(len(new_str))
            fmt += " b"
        else:
            p_len += len(new_str) + 2
            values.append(len(new_str))
            fmt += " h"
        values.append(new_str)
        fmt += " " + str(len(new_str)) + "s"

        new_str = self.random_world.encode("utf-8") if isinstance(self.random_world, unicode) else self.random_world
        if len(new_str) <= 127:
            p_len += len(new_str) + 1
            values.append(len(new_str))
            fmt += " b"
        else:
            p_len += len(new_str) + 2
            values.append(len(new_str))
            fmt += " h"
        values.append(new_str)
        fmt += " " + str(len(new_str)) + "s"

        values[0] = p_len
        return struct.pack(fmt, *values)


class ResponseEnterWorld(BaseMessage):
    ID = 4

    @property
    def id(self):
        return 4

    def __init__(self):
        BaseMessage.__init__(self)
        self.status = EnterWorldStatus.NONE
        self.my_id = -1

        self._format += " b b"
        self._struct = struct.Struct(self._format)

    def encode_self(self):
        # noinspection PyListCreation
        values = [0, self.id]
        p_len = 0
        fmt = "<i b"
        values.append(self.status)
        p_len += 1
        fmt += " b"
        values.append(self.my_id)
        p_len += 1
        fmt += " b"

        values[0] = p_len
        return struct.pack(fmt, *values)


class WorldData(BaseMessage):
    ID = 5

    @property
    def id(self):
        return 5

    def __init__(self):
        BaseMessage.__init__(self)
        self.name = ""
        self.world_step = -1
        self.size_x = -1
        self.size_y = -1
        self.max_population = -1

        self._format += " b 50s h h h h"
        self._struct = struct.Struct(self._format)

    def encode_self(self):
        # noinspection PyListCreation
        values = [0, self.id]
        p_len = 0
        fmt = "<i b"

        new_str = self.name.encode("utf-8") if isinstance(self.name, unicode) else self.name
        if len(new_str) <= 127:
            p_len += len(new_str) + 1
            values.append(len(new_str))
            fmt += " b"
        else:
            p_len += len(new_str) + 2
            values.append(len(new_str))
            fmt += " h"
        values.append(new_str)
        fmt += " " + str(len(new_str)) + "s"

        values.append(self.world_step)
        p_len += 2
        fmt += " h"
        values.append(self.size_x)
        p_len += 2
        fmt += " h"
        values.append(self.size_y)
        p_len += 2
        fmt += " h"
        values.append(self.max_population)
        p_len += 2
        fmt += " h"

        values[0] = p_len
        return struct.pack(fmt, *values)


class WorldSnapshot(BaseMessage):
    ID = 6

    @property
    def id(self):
        return 6

    def __init__(self):
        BaseMessage.__init__(self)
        self.snapshot = ""

        self._format += ""
        self._struct = struct.Struct(self._format)

    def encode_self(self):
        # noinspection PyListCreation
        values = [0, self.id]
        p_len = 0
        fmt = "<i b"

        new_str = self.snapshot.encode("utf-8") if isinstance(self.snapshot, unicode) else self.snapshot
        p_len += len(new_str) + 2
        values.append(len(new_str))
        fmt += " h"
        values.append(new_str)
        fmt += " " + str(len(new_str)) + "s"

        values[0] = p_len
        return struct.pack(fmt, *values)
