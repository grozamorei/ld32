import os


# noinspection PyClassHasNoInit
class GenStatus():
    ENUMS, MESSAGE = range(2)


class BaseGenerator():
    def __init__(self, target_d, protocol_d):
        """
        :type target_d: str - JSON descriptor of target file in format: {path:'..', imports:'..', namespace:'..'}
        :type protocol_d: str - JSON descriptor of protocol, the 'meat' of the generated file
        """

        # prepare file handle
        if os.path.exists(target_d['path']):
            os.remove(target_d['path'])
        self._file = open(name=target_d['path'], mode='w')

        # initialize state
        self._target_d = target_d
        self._protocol_d = protocol_d
        self._custom_enums = {}
        self.__gen_status = GenStatus.ENUMS

        # this can be overriden in '_before_generating'
        self._comment = '[COMMENT_CONTAINER]'
        self._base_class_name = '[BASE_CLASS_CONTAINER]'
        self._get_id_method_name = '[GET_ID_METHOD_CONTAINER]'
        self._send_stream_creator_name = '[SEND_STREAM_CREATOR_NAME]'
        self._receive_stream_creator_name = '[RECEIVE_STREAM_CREATOR_NAME]'

        self._before_generating()

    def generate(self):
        """
        Call this to perform standard generation routine
        """
        self.__write_disclaimer()
        self._write_includes_and_package()
        self._before_body()
        self.__write_protocol()
        self._after_body()

    def _before_generating(self):
        """
        Use this in derived classes to initialize or override
        something, i.e. comment symbols
        """
        pass

    #
    # Following is a block of standard upper level routines for class generation
    #

    def __write_disclaimer(self):
        """
        Writing message about generated nature of the file
        """
        message = 'ATTENTION: This file is automatically generated. do not try to edit it.'
        c = self._comment
        self._file.write('%s\n' % c)
        self._file.write('%s %s\n' % (c, message, ))
        self._file.write('%s\n\n' % c)

    def _write_includes_and_package(self):
        """
        Implement this in descendants
        """
        pass

    def _before_body(self):
        """
        Implement this in descendants
        """
        pass

    def __write_protocol(self):
        """
        Main meat - filling cycle happen here:
        """
        id_count = 0
        for item in self._protocol_d:
            if isinstance(item, dict):
                assert self.__gen_status == GenStatus.ENUMS
                assert item['type'] == 'enum'
                self._generate_enum(item)
            elif isinstance(item, list):
                if self.__gen_status == GenStatus.ENUMS:
                    self._generate_base_class()
                    self.__gen_status = GenStatus.MESSAGE
                self.__generate_message(item, id_count)
                id_count += 1

    def _after_body(self):
        """
        Implement this in descendants
        """
        pass

    #
    # Following is a block of standard sub level routines (enum and messages) for class generation
    #

    def _generate_enum(self, enum_descriptor):
        """
        :type enum_descriptor: str
        Remember new enum or throw assertion error if duplicate found.
        Override this in descendants to fill target file with
        language-specific content
        """
        enum_class_name = enum_descriptor['cls']
        assert enum_class_name not in self._custom_enums
        self._custom_enums.setdefault(enum_class_name, enum_descriptor)

    # noinspection PyMethodMayBeStatic
    def _generate_base_class(self):
        """
        Implement this in descendants for creating base message class
        """
        pass

    # noinspection PyMethodMayBeStatic
    def __generate_message(self, message_descriptor, message_id):
        """
        :type message_descriptor: list
        :type message_id: int
        """
        message_type = message_descriptor[1]

        self._message_class_header(message_descriptor, message_id)
        self._message_send_constructor(message_descriptor, message_type)
        self._message_receive_constructor(message_descriptor, message_type)
        self._message_send_encode(message_descriptor, message_type)
        self._message_class_footer()

    #
    # Following is a block of standard MESSAGE sub level routines
    #

    def _message_class_header(self, descriptor, message_id):
        pass

    def _message_send_constructor(self, descriptor, m_type):
        pass

    def _message_send_encode(self, descriptor, m_type):
        pass

    def _message_receive_constructor(self, descriptor, m_type):
        pass

    def _message_class_footer(self):
        pass